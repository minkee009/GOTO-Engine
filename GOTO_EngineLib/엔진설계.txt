엔진 코어 - 매니저 -> 시스템을 엔진외의 사용자가 접근해서 사용할 수 있게 도와주는 인터페이스 역할의 클래스다.
엔진 코어 - 시스템 -> 게임엔진의 직접로직을 가지고 있는 클래스다, 엔진외의 사용자가 접근해서 사용하지 못하게 막아야 함 ->공개수준을 전부 private으로 / friend는 Engine클래스만.

오브젝트 -> 컴포넌트와 게임오브젝트의 베이스클래스, new / delete 키워드로 쉽게 생성 및 삭제가 불가능하게, 오브젝트로 구현된 객체는 엔진루프에 의해 관리될 수 있도록 제한시키는 베이스 클래스다.
컴포넌트  -> 시스템에 등록해서 사용하는 엔진루프의 요소다. 단 게임오브젝트에 귀속되며, 게임오브젝트의 활성화 상태에 의해 엔진루프가 호출하는 함수의 접근이 일시적으로 제한될 수 있다.
게임오브젝트 -> 컴포넌트의 컨테이너다.
씬 -> 게임오브젝트의 컨테이너다.


~~오브젝트 생성 / 파괴 관리~~

~~트랜스폼 컴포넌트 작성~~

~~Fixed Update 및 TimeScale과 Unscaled Time 만들기~~

~~SetSiblingIndex(), GetSiblingIndex()~~ 

~~BehaviourManager만들기 ScriptBehaviour 만들기~~


~~- isFirstCall 삭제~~
	~~- 대신 BehaviourManager에 RegisterBehaviour할 때 최초 활성화 해쉬(Behaviour*)에 동시에 추가하고 나중에 그 해쉬에서 삭제할 수 있도록 변경~~
~~- OnDisable 처리~~
  ~~-> 나중에 IDispose 인터페이스, Dispose() 가상함수를 Object에 구축하고  Dispose()를 실행하면 정리해야 할 것을 정해야 함~~

~~- MessageData에 Func을 매개변수를 받아 처리할 수 있도록 변경시키기~~
~~- CRTP로 간단히 작성하는 방법~~

> 한꺼번에 할것 
// 클래스 작성 요령
https://gemini.google.com/app/20079e6f69d4da6d?hl=ko
// 참고자료 (유니티의 처리방식)
https://gemini.google.com/app/9808eda4490058e3?hl=ko

CameraComponent

IRenderImage 개념 바꾸기 -> D2DImage 수정

ResourceManager와 D2DRenderer의 GPUResourceMap 수정

Renderer 컴포넌트 정의, RenderManager 등록 및 Update()실행

SpriteRenderer 컴포넌트 작성

TextRenderer 컴포넌트 작성

>> 여기까지


Animator State 보강 -> transition 정의 ( 벡터 배열 )
AnimationController에 animation parameter 정의 ( 벡터 배열 )
-> FSM구조 확립


IRoutine을 이용한 코루틴 구현하기

// 루틴 인터페이스
struct IRoutine {
    virtual bool MoveNext() = 0;
    virtual ~IRoutine() = default;
};

Object::Instantiate() -> dynamic_cast<T>로 해결하기 -> type_id 별로 복사 컨텍스트 만들어주기

>> PhysicsManager, Physcis클래스(혹은 네임스페이스) , Collider 만들기

